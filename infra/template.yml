AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a service into an ECS cluster behind a public load balancer.
Parameters:
  EnvironmentName:
    Type: String
    Description: The name of the environment to add this service to
    Default: development

  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  ServiceName:
    Type: String
    Default: ms-logon
    Description: A name for the service

  ALBPublic:
    Type: String
    Description: A Load balance

  ImageUrl:
    Type: String
    Default: 268919435141.dkr.ecr.sa-east-1.amazonaws.com/bevcapital-mslogon:a51427e6722f0fed6cc6b54f5a9f596f9baeda2e
    Description:
      The url of a docker image that contains the application process that
      will handle the traffic for this service

  ECSServiceAutoScalingRoleARN:
    Description: The ECS service auto scaling role ARN
    Type: String

  ContainerPort:
    Type: Number
    Default: 5001
    Description: What port number the application inside the docker container is binding to

  ContainerCpu:
    Type: Number
    Default: 128
    Description: How much CPU to give the container. 1024 is 1 CPU

  ContainerMemory:
    Type: Number
    Default: 128
    Description: How much memory in megabytes to give the container

  Path:
    Type: String
    Default: "/ms-logon"
    Description: A path on the public load balancer that this service
      should be connected to. Use * to send all load balancer
      traffic to this service.

  Priority:
    Type: Number
    Default: 1
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.

  DesiredCount:
    Type: Number
    Default: 2
    Description: How many copies of the service task to run

  Role:
    Type: String
    Default: ""
    Description:
      (Optional) An IAM role to give the service's containers if the code within needs to
      access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [!Equals [!Ref "Role", ""]]

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref "ServiceName"
      Cpu: 500
      Memory: 500
      TaskRoleArn:
        Fn::If:
          - "HasCustomRole"
          - !Ref "Role"
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Ref "ServiceName"
          Cpu: 100
          Memory: 128
          Image: !Ref "ImageUrl"
          PortMappings:
            - ContainerPort: 80
            - HostPort: 5001
          Links:
            - xray-daemon
          Environment:
            - name: AWS_XRAY_DAEMON_ADDRESS
              value: xray-daemon:2000
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref "ServiceName"
        - Name: nginx
          Cpu: 100
          Memory: 128
          Essential: true
          Image: 268919435141.dkr.ecr.sa-east-1.amazonaws.com/bevcapital-mslogon-nginx
          PortMappings:
            - ContainerPort: 80
            - HostPort: 80
            - Protocol: TCP
          Links:
            - !Ref "ServiceName"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}-nginx
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref "ServiceName"
        - Name: xray-daemon
          Cpu: 100
          Memory: 128
          Essential: true
          Image: 268919435141.dkr.ecr.sa-east-1.amazonaws.com/bevcapital-mslogon-xray
          PortMappings:
            - ContainerPort: 2000
            - HostPort: 2000
            - Protocol: UDP
          Links:
            - !Ref "ServiceName"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}-xray
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Ref "ServiceName"

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerRule
    Properties:
      ServiceName: !Ref "ServiceName"
      Cluster: !Ref "Cluster"
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref "DesiredCount"
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: !Ref "ServiceName"
          ContainerPort: !Ref "ContainerPort"
          TargetGroupArn: !Ref "TargetGroup"

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health/live
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Ref "ServiceName"
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref "VPC"

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALBPublic
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref "TargetGroup"
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values: [!Ref "Path"]
      ListenerArn: !Ref "HttpListener"
      Priority: !Ref "Priority"

  # Enable autoscaling for this service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      ServiceNamespace: "ecs"
      ScalableDimension: "ecs:service:DesiredCount"
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref "Cluster"
            - !Ref "ServiceName"
      MinCapacity: 1
      MaxCapacity: 5
      RoleARN: !Ref "ECSServiceAutoScalingRoleARN"

  # Create scaling policies for the service
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - "/"
          - - scale
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
            - down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref "Cluster"
            - !Ref "ServiceName"
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"
      StepScalingPolicyConfiguration:
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: "Average"
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - "/"
          - - scale
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
            - up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref "Cluster"
            - !Ref "ServiceName"
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"
      StepScalingPolicyConfiguration:
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: "Average"
        Cooldown: 60

  # Create alarms to trigger these policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - "-"
          - - low-cpu
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
      AlarmDescription:
        Fn::Join:
          - " "
          - - "Low CPU utilization for service"
            - !Ref "ServiceName"
            - "in environment"
            - !Ref "EnvironmentName"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref "ServiceName"
        - Name: ClusterName
          Value: !Ref "Cluster"
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - "-"
          - - high-cpu
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
      AlarmDescription:
        Fn::Join:
          - " "
          - - "High CPU utilization for service"
            - !Ref "ServiceName"
            - "in environment"
            - !Ref "EnvironmentName"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref "ServiceName"
        - Name: ClusterName
          Value: !Ref "Cluster"
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
